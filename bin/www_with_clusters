#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('landing-nodejs:server');
var http = require('http');
const cluster = require('cluster');
const cpus = require('os').cpus();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

function startWorker() {
  const worker = cluster.fork();
  console.log('Cluster: ', worker.id);
}
  
if (cluster.isWorker) {
  console.log(`${cluster.worker.id}: ${process.pid}`);
}
  
if (cluster.isMaster) {
  cpus.forEach(() => startWorker());
  cluster.on('disconnect', worker => {
    console.log('disconnect worker: ', worker.id);
  });
  cluster.on('exit', (worker, code, signal) => {
    console.log(
      `worker ${
        worker.id
      } disconnect with code ${code} (${signal}), restarting...`
    );
    startWorker();
  });
} else {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
